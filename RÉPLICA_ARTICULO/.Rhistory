}
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
P=seq(0,0.7,0.01)
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
P=seq(0,0.7,0.01)
P
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
P=seq(0,0.7,0.01)
Pa=pbinom(0,5,P)
plot(Pa,P,type = "l")
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
C=c(2,3,5)
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
n=c(2,3,5)
P=seq(0,0.7,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(Pa,P,type = "l")
a=K
}
lines(Pa,P,add=T)
}
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
n=c(2,3,5)
P=seq(0,0.7,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(Pa,P,type = "l")
a="K"
}
lines(Pa,P,add=T)
}
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
n=c(2,3,5)
P=seq(0,0.7,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(Pa,P,type = "l",xlim = c(0,0.7))
a="K"
}
lines(Pa,P,add=T)
}
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
n=c(2,3,5)
P=seq(0,0.7,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l")
a="K"
}
lines(P,Pa,add=T)
}
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
n=c(5,3,2)
P=seq(0,0.7,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l")
a="K"
}
lines(P,Pa,add=T)
}
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
n=c(5,3,2)
P=seq(0,0.7,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l")
a="K"
}
lines(P,Pa,add=T)
abline(h=10)
}
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
n=c(5,3,2)
P=seq(0,0.7,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l")
a="K"
}
lines(P,Pa,add=T)
abline(h=10,add=T)
}
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
n=c(5,3,2)
P=seq(0,0.7,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l")
abline(h=0)
a="K"
}
lines(P,Pa,add=T)
}
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
n=c(5,3,2)
P=seq(0,0.7,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l")
abline(h=0.1)
a="K"
}
lines(P,Pa,add=T)
}
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
n=c(5,3,2)
P=seq(0,0.7,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l")
abline(h=0.1,col="red")
a="K"
}
lines(P,Pa,add=T)
}
which(Pa==0.1)
Pa
which(Pa==0.1024)
pbinom(0,2,0.637)
qbinom(0,2,0.1)
qbinom(0,2,0.637)
qbinom(0.9,2,0.01)
qbinom(0.1,2,0.01)
qbinom(0.1,2,0.637)
qbinom(0.1,2,0.637)
qbinom(0.637,2,0.1)
pbinom(0,2,0.637)
Pa
P
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
n=c(5,3,2)
P=seq(0,1,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l")
abline(h=0.1,col="red")
a="K"
}
lines(P,Pa,add=T)
}
#GRÁFICAS CURVAS CARACTERISTICAS DE OPERACIÓN
#PAG 17
n=c(5,3,2)
P=seq(0,1,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l",xlim=c(0,0.7))
abline(h=0.1,col="red")
a="K"
}
lines(P,Pa,add=T)
}
2/15
#PAG 18
n=c(13,8,5,3,2)
P=seq(0,1,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l",xlim=c(0,0.7))
abline(h=0.1,col="red")
a="K"
}
lines(P,Pa,add=T)
}
#PAG 19
n=c(20,13,8,5,3,2)
P=seq(0,1,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l",xlim=c(0,0.7))
abline(h=0.1,col="red")
a="K"
}
lines(P,Pa,add=T)
}
#PAG 19
n=c(32,20,13,8,5,3)
P=seq(0,1,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l",xlim=c(0,0.7))
abline(h=0.1,col="red")
a="K"
}
lines(P,Pa,add=T)
}
#PAG 21
n=c(80,50,32,20,13,8,5)
P=seq(0,1,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l",xlim=c(0,0.7))
abline(h=0.1,col="red")
a="K"
}
lines(P,Pa,add=T)
}
#PAG 22
n=c(80,32,20,13,7,5)
P=seq(0,1,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l",xlim=c(0,0.7))
abline(h=0.1,col="red")
a="K"
}
lines(P,Pa,add=T)
}
#PAG 23
n=c(125,50,32,20,13,10,6)
P=seq(0,1,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l",xlim=c(0,0.7))
abline(h=0.1,col="red")
a="K"
}
lines(P,Pa,add=T)
}
#PAG 24
n=c(125,50,29,16,11,7)
P=seq(0,1,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l",xlim=c(0,0.7))
abline(h=0.1,col="red")
a="K"
}
lines(P,Pa,add=T)
}
#PAG 25
n=c(125,75,47,27,19,11)
P=seq(0,1,0.01)
a=T
for (i in 1:length(n)) {
Pa=pbinom(0,n[i],P)
if(a==T){
plot(P,Pa,type = "l",xlim=c(0,0.7))
abline(h=0.1,col="red")
a="K"
}
lines(P,Pa,add=T)
}
f_milstd105e(N=600,L="II",type="n",NCA=10)
f_milstd105e(N=600,L="II",type="n",NCA=1)
qbinom(0.1,2,0.01)
pbinom(2,80,0.0652)
i=seq(0,1,0.0001)
while (j!=0.1) {
j=pbinom(2,80,i)
}
pbinom(2,80,0.652)
pbinom(2,80,0.0652)
i=seq(0,1,0.0001)
while (0.099<j) {
j=pbinom(2,80,0.0652)
}
i=seq(0,1,0.0001)
while (0.099<j) {
j=pbinom(2,80,i)
}
i=seq(0,1,0.0001)
while (0.099<j) {
j=0
j=pbinom(2,80,i)
}
pbinom(2,80,0.02)
i=seq(0,1,0.0001)
while (0.099>j) {
j=pbinom(2,80,i)
}
i=seq(0,1,0.0001)
j=0
while (0.099>j) {
j=pbinom(2,80,i)
}
i=seq(0,1,0.0001)
j=0
while (j<0.099) {
j=pbinom(2,80,i)
}
pbinom(2,80,i)
i=seq(0,1,0.0001)
j=0
k=1:length(i)
while (j<0.099) {
j=pbinom(2,80,i[k])
}
which(j==0.996)
j
which(j==0.09976464)
which(j=0.09976464)
a=c(1,2)
which(a==2)
i
i=seq(0,1,0.0001)
for (k in 1:length(i)) {
j=pbinom(2,80,i[k])
}
#Curva caracteristica de operación
f_DR.CO<-function(c,n,NCA){
if (missing(NCA)){
stop("El nivel de calidad aceptable debe de ser definido,
para calcular la probabilidad de aceptación")
}
if (missing(n)){
stop("La muestra debe de ser un número entero y positivo")
}
if (missing(c)){
stop("El numero de aceptación debes ser entero e igual o mayor que cero")
}
beta.x<-pbinom(c,n,NCA)
prob.x<-seq(0,0.13,by=0.001)
n.1<-pbinom(c,n,prob.x)
plot(prob.x, n.1, type = "l", lwd = 2,
col = 2, cex = 2, bg = NA,
xlab = "p", ylab = expression(1- alpha),
xlim = c(0,0.13), ylim = c(0,1),
main = "Curva de Operación",add=T)
# Agrega opciones de graficas de bajo nivel
segments(x0=0.0,y0=beta.x,x1=p,y1=beta.x,col="blue",lwd=2)
segments(x0=p,y0=0.0,x1=p,y1=beta.x,col="blue",lwd=2)
segments(x0=-0.0,y0=0,x1=0.1,y1=0,col="black",lwd=1)
segments(x0=-0.0,y0=0,x1=0,y1=1,col="black",lwd=1)
text(0.07,0.9, expression(paste(beta)),cex = 1, col="black")
text(0.075,0.9, expression(" = "),cex = 1, col="black")
text(0.09,0.9, round(beta.x,3),cex = 1, col="black")
grid(10, 10, lwd = 1)
structure(cbind("c"=c, "n"=n, "p"=p, "beta"=beta.x))
}
j
i[k]
i=seq(0,1,0.0001)
for (k in 1:length(i)) {
while(j<0.099){
j=pbinom(2,80,i[k])
}
}
j
i=seq(0,1,0.0001)
for (k in 1:length(i)) {
j=0
while(j<0.099){
j=pbinom(2,80,i[k])
}
}
b=0.1
n=(log(b)/log(1-RQL(0.09977,2,80)))
#Función para encontrar RQL
RQL=function(alfa,c,n){
a=seq(0,1,0.000001)
t=pbinom(c,n,a)
s=c()
for (i in 1:length(t)) {
if(t[i]>=alfa){
s=c(s,i)
}
}
max1=max(s)
return(a[max1])
}
b=0.1
n=(log(b)/log(1-RQL(0.09977,2,80)))
n
f_milstd105e(N=400,L="II",type="n",NCA=0.01) #Tamaño de muestra 3, nivel de aceptación 1%
RQL(0.099,0,50)
n=(log(b)/log(1-RQL(0.099,0,50)))
n
f_milstd105e(N=400,L="II",type="n",NCA=0.1) #Tamaño de muestra 3, nivel de aceptación 1%
f_milstd105e(N=35000,L="II",type="n",NCA=0.01) #Tamaño de muestra 3, nivel de aceptación 1%
RQL(0.099,0,500)
n=(log(b)/log(1-RQL(0.099,0,500)))
n
f_milstd105e(N=600,L="II",type="n",NCA=0.1) #Tamaño de muestra 3, nivel de aceptación 1%
RQL(0.099,0,80)
n=(log(b)/log(1-RQL(0.099,0,80)))
n
f_milstd105e(N=600,L="II",type="n",NCA=0.01) #Tamaño de muestra 3, nivel de aceptación 1%
f_milstd105e(N=600,L="II",type="n",NCA=0.04) #Tamaño de muestra 3, nivel de aceptación 1%
f_milstd105e(N=600,L="II",type="n",NCA=0.1) #Tamaño de muestra 3, nivel de aceptación 1%
#MIL-STD-105E
f_milstd105e<-function(N,L,NCA,type){
# Encontrar el numero de linea de intervalo del lote
if (missing(N)){
stop("El lote debe ser igual o mayor que 2")
} else {
data(lot_size)
lot_interval<-findInterval(N,lot_size[,1])+1
# Asigna el nivel de inspeccion si no es declarado explicitamente
if (missing(L)){
stop("Es necesario el argumento nivel o L")
} else {
# Encuentra la letra correspondiente al tama?o del lote y nivel de inspeccion
data(code_letter)
code_l<-code_letter[lot_interval,L]
}
# Asigna el valor por defecto de NCA si no es declarado
# Intepolando el valor dado de NCA a los valores de tabla
if (missing(NCA)){
stop("Es necesario el argumento NCA")
} else {
data(NCA_values)
if (any(NCA==NCA_values)){
NCA2<-NCA
} else {
NCA_interval<-findInterval(NCA,NCA_values)
NCA2<-NCA_values[NCA_interval]
}
} # Asigna el tipo de inpeccion si no es declarado
if (missing(type)){
stop("Es necesario el argumento type del tipo de inspeccion")
}
if(type=="n"){
T_ins<-"Normal"
} else {
if(type=="r"){
T_ins<-"Reducida"
} else {
T_ins<-"Rigurosa"
}
}
# Leer los planes de inspeccion
# La informacion queda
data(milstd105eplans)
# Busca con los argumetos code_l, T, NCA2 los valores n y c para el
# Plan de inspecci?n
code1<-milstd105eplans[milstd105eplans$code_letter==as.vector(code_l),]
T1<-code1[code1$T==type,]
NCA3<-T1[T1$NCA==NCA2,]
c<-NCA3$c
muestra<-NCA3$n
# Objetos con los nombres de los argumentos y los argumentos
argumentos_nombres<-c("Lote","Tipo de Inspeccion",
"Nivel de Inspeccion", "Nivel de Calidad Aceptable")
argumentos_plan<-c(N,T_ins,L,NCA)
# Objeto con los parametros del plan
resultados_nombres<-c("Codigo Letra","Nivel de Calidad Aceptable", "Muestra",
"Numero de Aceptacion", "Numero de Rechazo")
resultados_plan<-c(as.vector(code_l),NCA2,muestra,c,c+1)
# Integrar los resultados en un data frame
names(argumentos_plan)<-argumentos_nombres
names(resultados_plan)<-resultados_nombres
# Presentar resultados
print(argumentos_plan)
print(resultados_plan)
}
}
f_milstd105e(N=1300,L="II",type="n",NCA=1) #Tamaño de muestra 3, nivel de aceptación 1%
f_milstd105e(N=1300,L="II",type="n",NCA=4)#Tamaño de muestra 10, nivel de aceptación 4%
f_milstd105e(N=600,L="II",type="n",NCA=1) #Tamaño de muestra 3, nivel de aceptación 1%
f_milstd105e(N=600,L="II",type="n",NCA=4) #Tamaño de muestra 3, nivel de aceptación 1%
RQL(0.099,7,80)
n=(log(b)/log(1-RQL(0.099,7,80)))
n
f_milstd105e(N=15000,L="II",type="n",NCA=4) #Tamaño de muestra 3, nivel de aceptación 1%
n=(log(b)/log(1-RQL(0.099,21,315)))
n
