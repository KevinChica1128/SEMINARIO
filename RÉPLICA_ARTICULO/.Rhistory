code_l<-code_letter[lot_interval,L]
}
# Asigna el valor por defecto de NCA si no es declarado
# Intepolando el valor dado de NCA a los valores de tabla
if (missing(NCA)){
stop("Es necesario el argumento NCA")
} else {
data(NCA_values)
if (any(NCA==NCA_values)){
NCA2<-NCA
} else {
NCA_interval<-findInterval(NCA,NCA_values)
NCA2<-NCA_values[NCA_interval]
}
} # Asigna el tipo de inpeccion si no es declarado
if (missing(type)){
stop("Es necesario el argumento type del tipo de inspeccion")
}
if(type=="n"){
T_ins<-"Normal"
} else {
if(type=="r"){
T_ins<-"Reducida"
} else {
T_ins<-"Rigurosa"
}
}
# Leer los planes de inspeccion
# La informacion queda
data(milstd105eplans)
# Busca con los argumetos code_l, T, NCA2 los valores n y c para el
# Plan de inspecci?n
code1<-milstd105eplans[milstd105eplans$code_letter==as.vector(code_l),]
T1<-code1[code1$T==type,]
NCA3<-T1[T1$NCA==NCA2,]
c<-NCA3$c
muestra<-NCA3$n
# Objetos con los nombres de los argumentos y los argumentos
argumentos_nombres<-c("Lote","Tipo de Inspeccion",
"Nivel de Inspeccion", "Nivel de Calidad Aceptable")
argumentos_plan<-c(N,T_ins,L,NCA)
# Objeto con los parametros del plan
resultados_nombres<-c("Codigo Letra","Nivel de Calidad Aceptable", "Muestra",
"Numero de Aceptacion", "Numero de Rechazo")
resultados_plan<-c(as.vector(code_l),NCA2,muestra,c,c+1)
# Integrar los resultados en un data frame
names(argumentos_plan)<-argumentos_nombres
names(resultados_plan)<-resultados_nombres
# Presentar resultados
print(argumentos_plan)
print(resultados_plan)
}
}
#Curva caracteristica de operación(requiere c,n y NCA)
f_DR.CO<-function(c,n,NCA){
if (missing(NCA)){
stop("El nivel de calidad aceptable debe de ser definido,
para calcular la probabilidad de aceptación")
}
if (missing(n)){
stop("La muestra debe de ser un número entero y positivo")
}
if (missing(c)){
stop("El numero de aceptación debes ser entero e igual o mayor que cero")
}
beta.x<-pbinom(c,n,NCA/100)
prob.x<-seq(0,0.13,by=0.001)
n.1<-pbinom(c,n,prob.x)
plot(prob.x, n.1, type = "l", lwd = 2,
col = 2, cex = 2, bg = NA,
xlab = "p", ylab = expression(1- alpha),
xlim = c(0,0.13), ylim = c(0,1),
main = "Curva de Operación",add=T)
# Agrega opciones de graficas de bajo nivel
segments(x0=0.0,y0=beta.x,x1=p,y1=beta.x,col="blue",lwd=2)
segments(x0=p,y0=0.0,x1=p,y1=beta.x,col="blue",lwd=2)
segments(x0=-0.0,y0=0,x1=0.1,y1=0,col="black",lwd=1)
segments(x0=-0.0,y0=0,x1=0,y1=1,col="black",lwd=1)
text(0.07,0.9, expression(paste(beta)),cex = 1, col="black")
text(0.075,0.9, expression(" = "),cex = 1, col="black")
text(0.09,0.9, round(beta.x,3),cex = 1, col="black")
grid(10, 10, lwd = 1)
structure(cbind("c"=c, "n"=n, "p"=p, "beta"=beta.x))
}
#Curva característica de operación(requiere NCA, NCL, n y c)
f_CO.NCA.NCL<-function (NCA, NCL, n, c) {
if (missing(NCL)) {
stop("No existe el nivel de Calidad Limite")
}
else {
if (missing(NCA)) {
stop("No existe el nivel de Calidad Aceptable")
}
else {
if (missing(n)) {
stop("Tiene que definir la muestra")
}
else {
if (missing(c)) {
stop("Tiene que defir el numero de aceptacion")
}
else {
beta.NCL <- pbinom(c, n, NCL)
alpha.NCA <- pbinom(c, n, NCA)
prob.x <- seq(0, 0.125, by = 0.001)
n.1 <- pbinom(c, n, prob.x)
plot(prob.x, n.1, type = "l", lwd = 2,
col = 2, cex = 2, bg = "grey", xlab = "NCA - NCL",
ylab = "Pa", xlim = c(0, 0.13), ylim = c(0,
1), main = "Curva característica de operación")
segments(x0 = 0, y0 = beta.NCL, x1 = NCL, y1 = beta.NCL,
col = "blue", lwd = 2)
segments(x0 = NCL, y0 = 0, x1 = NCL, y1 = beta.NCL,
col = "blue", lwd = 2)
segments(x0 = 0, y0 = alpha.NCA, x1 = NCA,
y1 = alpha.NCA, col = "blue", lwd = 2)
segments(x0 = NCA, y0 = 0, x1 = NCA, y1 = alpha.NCA,
col = "blue", lwd = 2)
segments(x0 = -0, y0 = 0, x1 = 0.125, y1 = 0,
col = "black", lwd = 1)
segments(x0 = -0, y0 = 0, x1 = 0, y1 = 1, col = "black",
lwd = 1)
text(NCL * 0.95, beta.NCL * 1.6, expression(paste(beta)),
cex = 1, col = "black")
text(NCL, beta.NCL * 1.6, expression(" = "),
cex = 1, col = "black")
text(NCL * 1.05, beta.NCL * 1.6, round(beta.NCL,
3), cex = 1, col = "black")
text(NCA * 1.3, alpha.NCA, expression(paste(alpha)),
cex = 1, col = "black")
text(NCA * 1.4, alpha.NCA, expression(" = "),
cex = 1, col = "black")
text(NCA * 1.55, alpha.NCA, round(1 - alpha.NCA,
3), cex = 1, col = "black")
grid(10, 10, lwd = 1)
structure(cbind(c = c, n = n, NCA = NCA, NCL = NCL,
beta = beta.NCL, alpha = 1 - alpha.NCA))
}
}
}
}
}
f_milstd105e(N=15000,L="II",type="n",NCA=4) #Tamaño de muestra 3, nivel de aceptación 1%
#Función para encontrar RQL
RQL=function(alfa,c,n){
a=seq(0,1,0.000001)
t=pbinom(c,n,a)
s=c()
for (i in 1:length(t)) {
if(t[i]>=alfa){
s=c(s,i)
}
}
max1=max(s)
return(a[max1])
}
f_milstd105e(N=15000,L="II",type="n",NCA=4) #Tamaño de muestra 3, nivel de aceptación 1%
RQL(0.099,21,315)
n=(log(b)/log(1-RQL(0.099,21,315)))
n
b=0.1
n=(log(b)/log(1-RQL(0.099,21,315)))
n
RQL(0.1,10,125)
f_milstd105e(10000,L="II",type="n",NCA=4)
f_milstd105e(5000,L="II",type="n",NCA=4)
b=0.1
(log(b)/log(1-RQL(0.1,14,200)))
f_milstd105e(10000,L="II",type="n",NCA=4)
(log(b)/log(1-RQL(0.1,21,315)))
f_milstd105e(500,L="II",type="n",NCA=4)
(log(b)/log(1-RQL(0.1,7,80)))
f_milstd105e(1500,L="II",type="n",NCA=4)
(log(b)/log(1-RQL(0.1,4,125)))
library(Planesmuestra)
library(AcceptanceSampling)
#MIL-STD-105E
f_milstd105e<-function(N,L,NCA,type){
# Encontrar el numero de linea de intervalo del lote
if (missing(N)){
stop("El lote debe ser igual o mayor que 2")
} else {
data(lot_size)
lot_interval<-findInterval(N,lot_size[,1])+1
# Asigna el nivel de inspeccion si no es declarado explicitamente
if (missing(L)){
stop("Es necesario el argumento nivel o L")
} else {
# Encuentra la letra correspondiente al tama?o del lote y nivel de inspeccion
data(code_letter)
code_l<-code_letter[lot_interval,L]
}
# Asigna el valor por defecto de NCA si no es declarado
# Intepolando el valor dado de NCA a los valores de tabla
if (missing(NCA)){
stop("Es necesario el argumento NCA")
} else {
data(NCA_values)
if (any(NCA==NCA_values)){
NCA2<-NCA
} else {
NCA_interval<-findInterval(NCA,NCA_values)
NCA2<-NCA_values[NCA_interval]
}
} # Asigna el tipo de inpeccion si no es declarado
if (missing(type)){
stop("Es necesario el argumento type del tipo de inspeccion")
}
if(type=="n"){
T_ins<-"Normal"
} else {
if(type=="r"){
T_ins<-"Reducida"
} else {
T_ins<-"Rigurosa"
}
}
# Leer los planes de inspeccion
# La informacion queda
data(milstd105eplans)
# Busca con los argumetos code_l, T, NCA2 los valores n y c para el
# Plan de inspecci?n
code1<-milstd105eplans[milstd105eplans$code_letter==as.vector(code_l),]
T1<-code1[code1$T==type,]
NCA3<-T1[T1$NCA==NCA2,]
c<-NCA3$c
muestra<-NCA3$n
# Objetos con los nombres de los argumentos y los argumentos
argumentos_nombres<-c("Lote","Tipo de Inspeccion",
"Nivel de Inspeccion", "Nivel de Calidad Aceptable")
argumentos_plan<-c(N,T_ins,L,NCA)
# Objeto con los parametros del plan
resultados_nombres<-c("Codigo Letra","Nivel de Calidad Aceptable", "Muestra",
"Numero de Aceptacion", "Numero de Rechazo")
resultados_plan<-c(as.vector(code_l),NCA2,muestra,c,c+1)
# Integrar los resultados en un data frame
names(argumentos_plan)<-argumentos_nombres
names(resultados_plan)<-resultados_nombres
# Presentar resultados
print(argumentos_plan)
print(resultados_plan)
}
}
f_milstd105e(45,L="II",type="n",NCA=1)
#Función para encontrar RQL
RQL=function(alfa,c,n){
a=seq(0,1,0.000001)
t=pbinom(c,n,a)
s=c()
for (i in 1:length(t)) {
if(t[i]>=alfa){
s=c(s,i)
}
}
max1=max(s)
return(a[max1])
}
b=0.1
f_milstd105e(45,L="II",type="n",NCA=1)
(log(b)/log(1-RQL(0.1,1,45)))
(log(b)/log(1-RQL(0.1,1,8)))
(log(b)/log(1-RQL(0.1,1,8)))
#MIL-STD-105E
f_milstd105e<-function(N,L,NCA,type){
# Encontrar el numero de linea de intervalo del lote
if (missing(N)){
stop("El lote debe ser igual o mayor que 2")
} else {
data(lot_size)
lot_interval<-findInterval(N,lot_size[,1])+1
# Asigna el nivel de inspeccion si no es declarado explicitamente
if (missing(L)){
stop("Es necesario el argumento nivel o L")
} else {
# Encuentra la letra correspondiente al tama?o del lote y nivel de inspeccion
data(code_letter)
code_l<-code_letter[lot_interval,L]
}
# Asigna el valor por defecto de NCA si no es declarado
# Intepolando el valor dado de NCA a los valores de tabla
if (missing(NCA)){
stop("Es necesario el argumento NCA")
} else {
data(NCA_values)
if (any(NCA==NCA_values)){
NCA2<-NCA
} else {
NCA_interval<-findInterval(NCA,NCA_values)
NCA2<-NCA_values[NCA_interval]
}
} # Asigna el tipo de inpeccion si no es declarado
if (missing(type)){
stop("Es necesario el argumento type del tipo de inspeccion")
}
if(type=="n"){
T_ins<-"Normal"
} else {
if(type=="r"){
T_ins<-"Reducida"
} else {
T_ins<-"Rigurosa"
}
}
# Leer los planes de inspeccion
# La informacion queda
data(milstd105eplans)
# Busca con los argumetos code_l, T, NCA2 los valores n y c para el
# Plan de inspecci?n
code1<-milstd105eplans[milstd105eplans$code_letter==as.vector(code_l),]
T1<-code1[code1$T==type,]
NCA3<-T1[T1$NCA==NCA2,]
c<-NCA3$c
muestra<-NCA3$n
# Objetos con los nombres de los argumentos y los argumentos
argumentos_nombres<-c("Lote","Tipo de Inspeccion",
"Nivel de Inspeccion", "Nivel de Calidad Aceptable")
argumentos_plan<-c(N,T_ins,L,NCA)
# Objeto con los parametros del plan
resultados_nombres<-c("Codigo Letra","Nivel de Calidad Aceptable", "Muestra",
"Numero de Aceptacion", "Numero de Rechazo")
resultados_plan<-c(as.vector(code_l),NCA2,muestra,c,c+1)
# Integrar los resultados en un data frame
names(argumentos_plan)<-argumentos_nombres
names(resultados_plan)<-resultados_nombres
# Presentar resultados
print(argumentos_plan)
print(resultados_plan)
}
}
f_milstd105e(20,L="II",type="n",NCA=4)
library(Planesmuestra)
library(AcceptanceSampling)
f_milstd105e(20,L="II",type="n",NCA=4)
#Función para encontrar RQL
RQL=function(alfa,c,n){
a=seq(0,1,0.000001)
t=pbinom(c,n,a)
s=c()
for (i in 1:length(t)) {
if(t[i]>=alfa){
s=c(s,i)
}
}
max1=max(s)
return(a[max1])
}
(log(b)/log(1-RQL(0.09977,5,0)))
b=0.1
(log(b)/log(1-RQL(0.09977,5,0)))
RQL(0.1,5,0)
f_milstd105e(N=2000,L="II",type="n",NCA=1) #Tamaño de muestra 3, nivel de aceptación 1%
n=(log(b)/log(1-RQL(0.099,3,125)))
n
library(Planesmuestra)
library(AcceptanceSampling)
#MIL-STD-105E
f_milstd105e<-function(N,L,NCA,type){
# Encontrar el numero de linea de intervalo del lote
if (missing(N)){
stop("El lote debe ser igual o mayor que 2")
} else {
data(lot_size)
lot_interval<-findInterval(N,lot_size[,1])+1
# Asigna el nivel de inspeccion si no es declarado explicitamente
if (missing(L)){
stop("Es necesario el argumento nivel o L")
} else {
# Encuentra la letra correspondiente al tama?o del lote y nivel de inspeccion
data(code_letter)
code_l<-code_letter[lot_interval,L]
}
# Asigna el valor por defecto de NCA si no es declarado
# Intepolando el valor dado de NCA a los valores de tabla
if (missing(NCA)){
stop("Es necesario el argumento NCA")
} else {
data(NCA_values)
if (any(NCA==NCA_values)){
NCA2<-NCA
} else {
NCA_interval<-findInterval(NCA,NCA_values)
NCA2<-NCA_values[NCA_interval]
}
} # Asigna el tipo de inpeccion si no es declarado
if (missing(type)){
stop("Es necesario el argumento type del tipo de inspeccion")
}
if(type=="n"){
T_ins<-"Normal"
} else {
if(type=="r"){
T_ins<-"Reducida"
} else {
T_ins<-"Rigurosa"
}
}
# Leer los planes de inspeccion
# La informacion queda
data(milstd105eplans)
# Busca con los argumetos code_l, T, NCA2 los valores n y c para el
# Plan de inspecci?n
code1<-milstd105eplans[milstd105eplans$code_letter==as.vector(code_l),]
T1<-code1[code1$T==type,]
NCA3<-T1[T1$NCA==NCA2,]
c<-NCA3$c
muestra<-NCA3$n
# Objetos con los nombres de los argumentos y los argumentos
argumentos_nombres<-c("Lote","Tipo de Inspeccion",
"Nivel de Inspeccion", "Nivel de Calidad Aceptable")
argumentos_plan<-c(N,T_ins,L,NCA)
# Objeto con los parametros del plan
resultados_nombres<-c("Codigo Letra","Nivel de Calidad Aceptable", "Muestra",
"Numero de Aceptacion", "Numero de Rechazo")
resultados_plan<-c(as.vector(code_l),NCA2,muestra,c,c+1)
# Integrar los resultados en un data frame
names(argumentos_plan)<-argumentos_nombres
names(resultados_plan)<-resultados_nombres
# Presentar resultados
print(argumentos_plan)
print(resultados_plan)
}
}
f_milstd105e(3300,L="II",type="n",NCA=0.1)
f_milstd105e(3300,L="II",type="r",NCA=0.1)
f_milstd105e(3300,L="II",type="t",NCA=0.1)
f_milstd105e(3300,L="II",type="n",NCA=0.1)
library(Planesmuestra)
library(AcceptanceSampling)
#MIL-STD-105E
f_milstd105e<-function(N,L,NCA,type){
# Encontrar el numero de linea de intervalo del lote
if (missing(N)){
stop("El lote debe ser igual o mayor que 2")
} else {
data(lot_size)
lot_interval<-findInterval(N,lot_size[,1])+1
# Asigna el nivel de inspeccion si no es declarado explicitamente
if (missing(L)){
stop("Es necesario el argumento nivel o L")
} else {
# Encuentra la letra correspondiente al tama?o del lote y nivel de inspeccion
data(code_letter)
code_l<-code_letter[lot_interval,L]
}
# Asigna el valor por defecto de NCA si no es declarado
# Intepolando el valor dado de NCA a los valores de tabla
if (missing(NCA)){
stop("Es necesario el argumento NCA")
} else {
data(NCA_values)
if (any(NCA==NCA_values)){
NCA2<-NCA
} else {
NCA_interval<-findInterval(NCA,NCA_values)
NCA2<-NCA_values[NCA_interval]
}
} # Asigna el tipo de inpeccion si no es declarado
if (missing(type)){
stop("Es necesario el argumento type del tipo de inspeccion")
}
if(type=="n"){
T_ins<-"Normal"
} else {
if(type=="r"){
T_ins<-"Reducida"
} else {
T_ins<-"Rigurosa"
}
}
# Leer los planes de inspeccion
# La informacion queda
data(milstd105eplans)
# Busca con los argumetos code_l, T, NCA2 los valores n y c para el
# Plan de inspecci?n
code1<-milstd105eplans[milstd105eplans$code_letter==as.vector(code_l),]
T1<-code1[code1$T==type,]
NCA3<-T1[T1$NCA==NCA2,]
c<-NCA3$c
muestra<-NCA3$n
# Objetos con los nombres de los argumentos y los argumentos
argumentos_nombres<-c("Lote","Tipo de Inspeccion",
"Nivel de Inspeccion", "Nivel de Calidad Aceptable")
argumentos_plan<-c(N,T_ins,L,NCA)
# Objeto con los parametros del plan
resultados_nombres<-c("Codigo Letra","Nivel de Calidad Aceptable", "Muestra",
"Numero de Aceptacion", "Numero de Rechazo")
resultados_plan<-c(as.vector(code_l),NCA2,muestra,c,c+1)
# Integrar los resultados en un data frame
names(argumentos_plan)<-argumentos_nombres
names(resultados_plan)<-resultados_nombres
# Presentar resultados
print(argumentos_plan)
print(resultados_plan)
}
}
f_milstd105e(N=5000,L="II",type="n",NCA=1)
#Función para encontrar RQL
RQL=function(alfa,c,n){
a=seq(0,1,0.000001)
t=pbinom(c,n,a)
s=c()
for (i in 1:length(t)) {
if(t[i]>=alfa){
s=c(s,i)
}
}
max1=max(s)
return(a[max1])
}
b=0.1
n=(log(b)/log(1-RQL(0.09977,5,200)))
n
